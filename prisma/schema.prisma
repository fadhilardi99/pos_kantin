// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User roles and authentication
enum UserRole {
  ADMIN
  CASHIER
  STUDENT
  PARENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Product and inventory
enum ProductCategory {
  MAKANAN_BERAT
  MAKANAN_RINGAN
  MINUMAN
  SNACK
  LAINNYA
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

// Transaction and payment
enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  QR_CODE
  TRANSFER
  E_WALLET
}

enum TopUpStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admin     Admin?
  cashier   Cashier?
  student   Student?
  parent    Parent?

  @@map("users")
}

// Admin model
model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  nip       String   @unique
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  topUps TopUp[]

  @@map("admins")
}

// Cashier model
model Cashier {
  id        String   @id @default(cuid())
  userId    String   @unique
  nip       String   @unique
  shift     String
  shifts    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("cashiers")
}

// Student model
model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  nis       String   @unique
  nisn      String?  @unique
  name      String
  class     String
  grade     String
  saldo     Decimal  @default(0) @db.Decimal(10, 2)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  topUps       TopUp[]
  parentStudents ParentStudent[]

  @@map("students")
}

// Parent model
model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  nik       String   @unique
  name      String
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentStudents  ParentStudent[]
  topUps          TopUp[]

  @@map("parents")
}

// Parent-Student relationship
model ParentStudent {
  id        String   @id @default(cuid())
  parentId  String
  studentId String
  relation  String   // "Ayah", "Ibu", "Wali"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@map("parent_students")
}

// Product model
model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  stock       Int           @default(0)
  category    ProductCategory
  status      ProductStatus @default(AVAILABLE)
  image       String?
  barcode     String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  transactionItems TransactionItem[]

  @@map("products")
}

// Transaction model
model Transaction {
  id            String            @id @default(cuid())
  transactionNo String            @unique
  studentId     String
  cashierId     String?
  totalAmount   Decimal           @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        TransactionStatus @default(PENDING)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  student         Student           @relation(fields: [studentId], references: [id])
  cashier         Cashier?          @relation(fields: [cashierId], references: [id])
  transactionItems TransactionItem[]

  @@map("transactions")
}

// Transaction items (many-to-many relationship)
model TransactionItem {
  id            String   @id @default(cuid())
  transactionId String
  productId     String
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  subtotal      Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])

  @@unique([transactionId, productId])
  @@map("transaction_items")
}

// Top Up model
model TopUp {
  id          String      @id @default(cuid())
  studentId   String
  parentId    String?
  amount      Decimal     @db.Decimal(10, 2)
  method      PaymentMethod
  status      TopUpStatus @default(PENDING)
  proofImage  String?
  notes       String?
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id])
  parent  Parent? @relation(fields: [parentId], references: [id])
  admin   Admin?  @relation(fields: [approvedBy], references: [id])

  @@map("top_ups")
}

// School settings
model SchoolSettings {
  id          String   @id @default(cuid())
  schoolName  String
  canteenName String
  address     String?
  phone       String?
  email       String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("school_settings")
}

// Audit log for tracking changes
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  table     String
  recordId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
} 